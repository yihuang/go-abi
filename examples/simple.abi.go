// Code generated by go-abi. DO NOT EDIT.

package examples

import (
	"io"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// send(address,uint256)
	SendSelector = [4]byte{0xd0, 0x67, 0x9d, 0x34}
)

// Big endian integer versions of function selectors
const (
	SendID = 3496451380
)

const SendCallStaticSize = 64

// SendCall represents an ABI tuple
type SendCall struct {
	To     common.Address
	Amount *big.Int
}

// EncodedSize returns the total encoded size of SendCall
func (t SendCall) EncodedSize() int {
	dynamicSize := 0

	return SendCallStaticSize + dynamicSize
}

// EncodeTo encodes SendCall to ABI bytes in the provided buffer
func (value SendCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SendCallStaticSize // Start dynamic data after static section
	// Field To: address
	if _, err := abi.EncodeAddress(value.To, buf[0:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes SendCall to ABI bytes
func (value SendCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SendCall from ABI bytes in the provided buffer
func (t *SendCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field To: address
	t.To, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t SendCall) GetMethodName() string {
	return "send"
}

// GetMethodID returns the function name
func (t SendCall) GetMethodID() [4]byte {
	return SendSelector
}

// EncodeWithSelector encodes send arguments to ABI bytes including function selector
func (t SendCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], SendSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

// SendReturn represents the input arguments for send function
type SendReturn struct {
	abi.EmptyTuple
}
