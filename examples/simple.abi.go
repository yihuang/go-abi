// Code generated by go-abi. DO NOT EDIT.

package examples

import (
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
	"math/big"
)

// Function selectors
var (
	// send(address,uint256)
	SendSelector = [4]byte{0xd0, 0x67, 0x9d, 0x34}
)

// Big endian integer versions of function selectors
const (
	SendSelectorInt = 3496451380
)

const SendCallStaticSize = 64

// SendCall represents an ABI tuple
type SendCall struct {
	To     common.Address
	Amount *big.Int
}

// EncodedSize returns the total encoded size of SendCall
func (t SendCall) EncodedSize() int {
	dynamicSize := 0

	return SendCallStaticSize + dynamicSize
}

// EncodeTo encodes SendCall to ABI bytes in the provided buffer
// it panics if the buffer is not large enough
func (t SendCall) EncodeTo(buf []byte) (int, error) {
	dynamicOffset := SendCallStaticSize // Start dynamic data after static section

	// To (static)
	copy(buf[0+12:0+32], t.To[:])
	// Amount (static)

	if err := abi.EncodeBigInt(t.Amount, buf[32:64], false); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes SendCall to ABI bytes
func (t SendCall) Encode() ([]byte, error) {
	buf := make([]byte, t.EncodedSize())
	if _, err := t.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// DecodeFrom decodes SendCall from ABI bytes in the provided buffer
func (t *SendCall) DecodeFrom(data0 []byte) error {
	if len(data0) < SendCallStaticSize {
		return fmt.Errorf("insufficient data for SendCall")
	}

	// t.To (static)
	copy(t.To[:], data0[0+12:0+32])
	// t.Amount (static)
	t.Amount = new(big.Int).SetBytes(data0[32:64])

	return nil
}

// Decode decodes SendCall from ABI bytes
func (t *SendCall) Decode(data []byte) error {
	return t.DecodeFrom(data)
}

// EncodeWithSelector encodes send arguments to ABI bytes including function selector
func (t SendCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], SendSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}
