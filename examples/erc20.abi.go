// Code generated by go-abi. DO NOT EDIT.

package examples

import (
	"encoding/binary"
	"errors"
	"fmt"
	"io"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// allowance(address,address)
	AllowanceSelector = [4]byte{0xdd, 0x62, 0xed, 0x3e}
	// approve(address,uint256)
	ApproveSelector = [4]byte{0x09, 0x5e, 0xa7, 0xb3}
	// balanceOf(address)
	BalanceOfSelector = [4]byte{0x70, 0xa0, 0x82, 0x31}
	// decimals()
	DecimalsSelector = [4]byte{0x31, 0x3c, 0xe5, 0x67}
	// name()
	NameSelector = [4]byte{0x06, 0xfd, 0xde, 0x03}
	// symbol()
	SymbolSelector = [4]byte{0x95, 0xd8, 0x9b, 0x41}
	// totalSupply()
	TotalSupplySelector = [4]byte{0x18, 0x16, 0x0d, 0xdd}
	// transfer(address,uint256)
	TransferSelector = [4]byte{0xa9, 0x05, 0x9c, 0xbb}
	// transferFrom(address,address,uint256)
	TransferFromSelector = [4]byte{0x23, 0xb8, 0x72, 0xdd}
)

// Big endian integer versions of function selectors
const (
	AllowanceID    = 3714247998
	ApproveID      = 157198259
	BalanceOfID    = 1889567281
	DecimalsID     = 826074471
	NameID         = 117300739
	SymbolID       = 2514000705
	TotalSupplyID  = 404098525
	TransferID     = 2835717307
	TransferFromID = 599290589
)

// EncodeBool encodes bool to ABI bytes
func EncodeBool(value bool, buf []byte) (int, error) {
	if value {
		buf[31] = 1
	}
	return 32, nil
}

// DecodeBool decodes bool from ABI bytes
func DecodeBool(data []byte) (bool, int, error) {
	result := data[31] != 0
	return result, 32, nil
}

const AllowanceCallStaticSize = 64

// AllowanceCall represents an ABI tuple
type AllowanceCall struct {
	Owner   common.Address
	Spender common.Address
}

// EncodedSize returns the total encoded size of AllowanceCall
func (t AllowanceCall) EncodedSize() int {
	dynamicSize := 0

	return AllowanceCallStaticSize + dynamicSize
}

// EncodeTo encodes AllowanceCall to ABI bytes in the provided buffer
func (value AllowanceCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := AllowanceCallStaticSize // Start dynamic data after static section
	// Field Owner: address
	if _, err := abi.EncodeAddress(value.Owner, buf[0:]); err != nil {
		return 0, err
	}

	// Field Spender: address
	if _, err := abi.EncodeAddress(value.Spender, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes AllowanceCall to ABI bytes
func (value AllowanceCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes AllowanceCall from ABI bytes in the provided buffer
func (t *AllowanceCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Owner: address
	t.Owner, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Spender: address
	t.Spender, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes allowance arguments to ABI bytes including function selector
func (t AllowanceCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], AllowanceSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const AllowanceReturnStaticSize = 32

// AllowanceReturn represents an ABI tuple
type AllowanceReturn struct {
	Field1 *big.Int
}

// EncodedSize returns the total encoded size of AllowanceReturn
func (t AllowanceReturn) EncodedSize() int {
	dynamicSize := 0

	return AllowanceReturnStaticSize + dynamicSize
}

// EncodeTo encodes AllowanceReturn to ABI bytes in the provided buffer
func (value AllowanceReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := AllowanceReturnStaticSize // Start dynamic data after static section
	// Field Field1: uint256
	if _, err := abi.EncodeUint256(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes AllowanceReturn to ABI bytes
func (value AllowanceReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes AllowanceReturn from ABI bytes in the provided buffer
func (t *AllowanceReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: uint256
	t.Field1, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const ApproveCallStaticSize = 64

// ApproveCall represents an ABI tuple
type ApproveCall struct {
	Spender common.Address
	Amount  *big.Int
}

// EncodedSize returns the total encoded size of ApproveCall
func (t ApproveCall) EncodedSize() int {
	dynamicSize := 0

	return ApproveCallStaticSize + dynamicSize
}

// EncodeTo encodes ApproveCall to ABI bytes in the provided buffer
func (value ApproveCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ApproveCallStaticSize // Start dynamic data after static section
	// Field Spender: address
	if _, err := abi.EncodeAddress(value.Spender, buf[0:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ApproveCall to ABI bytes
func (value ApproveCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ApproveCall from ABI bytes in the provided buffer
func (t *ApproveCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Spender: address
	t.Spender, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes approve arguments to ABI bytes including function selector
func (t ApproveCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ApproveSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ApproveReturnStaticSize = 32

// ApproveReturn represents an ABI tuple
type ApproveReturn struct {
	Field1 bool
}

// EncodedSize returns the total encoded size of ApproveReturn
func (t ApproveReturn) EncodedSize() int {
	dynamicSize := 0

	return ApproveReturnStaticSize + dynamicSize
}

// EncodeTo encodes ApproveReturn to ABI bytes in the provided buffer
func (value ApproveReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ApproveReturnStaticSize // Start dynamic data after static section
	// Field Field1: bool
	if _, err := EncodeBool(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ApproveReturn to ABI bytes
func (value ApproveReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ApproveReturn from ABI bytes in the provided buffer
func (t *ApproveReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: bool
	t.Field1, _, err = DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const BalanceOfCallStaticSize = 32

// BalanceOfCall represents an ABI tuple
type BalanceOfCall struct {
	Account common.Address
}

// EncodedSize returns the total encoded size of BalanceOfCall
func (t BalanceOfCall) EncodedSize() int {
	dynamicSize := 0

	return BalanceOfCallStaticSize + dynamicSize
}

// EncodeTo encodes BalanceOfCall to ABI bytes in the provided buffer
func (value BalanceOfCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := BalanceOfCallStaticSize // Start dynamic data after static section
	// Field Account: address
	if _, err := abi.EncodeAddress(value.Account, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes BalanceOfCall to ABI bytes
func (value BalanceOfCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes BalanceOfCall from ABI bytes in the provided buffer
func (t *BalanceOfCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Account: address
	t.Account, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes balanceOf arguments to ABI bytes including function selector
func (t BalanceOfCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], BalanceOfSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const BalanceOfReturnStaticSize = 32

// BalanceOfReturn represents an ABI tuple
type BalanceOfReturn struct {
	Field1 *big.Int
}

// EncodedSize returns the total encoded size of BalanceOfReturn
func (t BalanceOfReturn) EncodedSize() int {
	dynamicSize := 0

	return BalanceOfReturnStaticSize + dynamicSize
}

// EncodeTo encodes BalanceOfReturn to ABI bytes in the provided buffer
func (value BalanceOfReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := BalanceOfReturnStaticSize // Start dynamic data after static section
	// Field Field1: uint256
	if _, err := abi.EncodeUint256(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes BalanceOfReturn to ABI bytes
func (value BalanceOfReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes BalanceOfReturn from ABI bytes in the provided buffer
func (t *BalanceOfReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: uint256
	t.Field1, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// DecimalsCall represents the input arguments for decimals function
type DecimalsCall struct {
	abi.EmptyTuple
}

// EncodeWithSelector encodes decimals arguments to ABI bytes including function selector
func (t DecimalsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DecimalsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DecimalsReturnStaticSize = 32

// DecimalsReturn represents an ABI tuple
type DecimalsReturn struct {
	Field1 uint8
}

// EncodedSize returns the total encoded size of DecimalsReturn
func (t DecimalsReturn) EncodedSize() int {
	dynamicSize := 0

	return DecimalsReturnStaticSize + dynamicSize
}

// EncodeTo encodes DecimalsReturn to ABI bytes in the provided buffer
func (value DecimalsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DecimalsReturnStaticSize // Start dynamic data after static section
	// Field Field1: uint8
	if _, err := abi.EncodeUint8(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DecimalsReturn to ABI bytes
func (value DecimalsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DecimalsReturn from ABI bytes in the provided buffer
func (t *DecimalsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: uint8
	t.Field1, _, err = abi.DecodeUint8(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// NameCall represents the input arguments for name function
type NameCall struct {
	abi.EmptyTuple
}

// EncodeWithSelector encodes name arguments to ABI bytes including function selector
func (t NameCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], NameSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const NameReturnStaticSize = 32

// NameReturn represents an ABI tuple
type NameReturn struct {
	Field1 string
}

// EncodedSize returns the total encoded size of NameReturn
func (t NameReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Field1)

	return NameReturnStaticSize + dynamicSize
}

// EncodeTo encodes NameReturn to ABI bytes in the provided buffer
func (value NameReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := NameReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Field1: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Field1, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes NameReturn to ABI bytes
func (value NameReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes NameReturn from ABI bytes in the provided buffer
func (t *NameReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Field1
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Field1")
		}
		t.Field1, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// SymbolCall represents the input arguments for symbol function
type SymbolCall struct {
	abi.EmptyTuple
}

// EncodeWithSelector encodes symbol arguments to ABI bytes including function selector
func (t SymbolCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], SymbolSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const SymbolReturnStaticSize = 32

// SymbolReturn represents an ABI tuple
type SymbolReturn struct {
	Field1 string
}

// EncodedSize returns the total encoded size of SymbolReturn
func (t SymbolReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Field1)

	return SymbolReturnStaticSize + dynamicSize
}

// EncodeTo encodes SymbolReturn to ABI bytes in the provided buffer
func (value SymbolReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SymbolReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Field1: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Field1, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes SymbolReturn to ABI bytes
func (value SymbolReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SymbolReturn from ABI bytes in the provided buffer
func (t *SymbolReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Field1
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Field1")
		}
		t.Field1, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// TotalSupplyCall represents the input arguments for totalSupply function
type TotalSupplyCall struct {
	abi.EmptyTuple
}

// EncodeWithSelector encodes totalSupply arguments to ABI bytes including function selector
func (t TotalSupplyCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], TotalSupplySelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const TotalSupplyReturnStaticSize = 32

// TotalSupplyReturn represents an ABI tuple
type TotalSupplyReturn struct {
	Field1 *big.Int
}

// EncodedSize returns the total encoded size of TotalSupplyReturn
func (t TotalSupplyReturn) EncodedSize() int {
	dynamicSize := 0

	return TotalSupplyReturnStaticSize + dynamicSize
}

// EncodeTo encodes TotalSupplyReturn to ABI bytes in the provided buffer
func (value TotalSupplyReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TotalSupplyReturnStaticSize // Start dynamic data after static section
	// Field Field1: uint256
	if _, err := abi.EncodeUint256(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes TotalSupplyReturn to ABI bytes
func (value TotalSupplyReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TotalSupplyReturn from ABI bytes in the provided buffer
func (t *TotalSupplyReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: uint256
	t.Field1, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const TransferCallStaticSize = 64

// TransferCall represents an ABI tuple
type TransferCall struct {
	To     common.Address
	Amount *big.Int
}

// EncodedSize returns the total encoded size of TransferCall
func (t TransferCall) EncodedSize() int {
	dynamicSize := 0

	return TransferCallStaticSize + dynamicSize
}

// EncodeTo encodes TransferCall to ABI bytes in the provided buffer
func (value TransferCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TransferCallStaticSize // Start dynamic data after static section
	// Field To: address
	if _, err := abi.EncodeAddress(value.To, buf[0:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes TransferCall to ABI bytes
func (value TransferCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TransferCall from ABI bytes in the provided buffer
func (t *TransferCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field To: address
	t.To, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes transfer arguments to ABI bytes including function selector
func (t TransferCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], TransferSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const TransferReturnStaticSize = 32

// TransferReturn represents an ABI tuple
type TransferReturn struct {
	Field1 bool
}

// EncodedSize returns the total encoded size of TransferReturn
func (t TransferReturn) EncodedSize() int {
	dynamicSize := 0

	return TransferReturnStaticSize + dynamicSize
}

// EncodeTo encodes TransferReturn to ABI bytes in the provided buffer
func (value TransferReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TransferReturnStaticSize // Start dynamic data after static section
	// Field Field1: bool
	if _, err := EncodeBool(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes TransferReturn to ABI bytes
func (value TransferReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TransferReturn from ABI bytes in the provided buffer
func (t *TransferReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: bool
	t.Field1, _, err = DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const TransferFromCallStaticSize = 96

// TransferFromCall represents an ABI tuple
type TransferFromCall struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
}

// EncodedSize returns the total encoded size of TransferFromCall
func (t TransferFromCall) EncodedSize() int {
	dynamicSize := 0

	return TransferFromCallStaticSize + dynamicSize
}

// EncodeTo encodes TransferFromCall to ABI bytes in the provided buffer
func (value TransferFromCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TransferFromCallStaticSize // Start dynamic data after static section
	// Field From: address
	if _, err := abi.EncodeAddress(value.From, buf[0:]); err != nil {
		return 0, err
	}

	// Field To: address
	if _, err := abi.EncodeAddress(value.To, buf[32:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[64:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes TransferFromCall to ABI bytes
func (value TransferFromCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TransferFromCall from ABI bytes in the provided buffer
func (t *TransferFromCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 96
	// Decode static field From: address
	t.From, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field To: address
	t.To, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes transferFrom arguments to ABI bytes including function selector
func (t TransferFromCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], TransferFromSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const TransferFromReturnStaticSize = 32

// TransferFromReturn represents an ABI tuple
type TransferFromReturn struct {
	Field1 bool
}

// EncodedSize returns the total encoded size of TransferFromReturn
func (t TransferFromReturn) EncodedSize() int {
	dynamicSize := 0

	return TransferFromReturnStaticSize + dynamicSize
}

// EncodeTo encodes TransferFromReturn to ABI bytes in the provided buffer
func (value TransferFromReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TransferFromReturnStaticSize // Start dynamic data after static section
	// Field Field1: bool
	if _, err := EncodeBool(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes TransferFromReturn to ABI bytes
func (value TransferFromReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TransferFromReturn from ABI bytes in the provided buffer
func (t *TransferFromReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: bool
	t.Field1, _, err = DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// Event signatures
var (
	// Approval(address,address,uint256)
	ApprovalEventTopic = common.Hash{0x8c, 0x5b, 0xe1, 0xe5, 0xeb, 0xec, 0x7d, 0x5b, 0xd1, 0x4f, 0x71, 0x42, 0x7d, 0x1e, 0x84, 0xf3, 0xdd, 0x03, 0x14, 0xc0, 0xf7, 0xb2, 0x29, 0x1e, 0x5b, 0x20, 0x0a, 0xc8, 0xc7, 0xc3, 0xb9, 0x25}
	// Transfer(address,address,uint256)
	TransferEventTopic = common.Hash{0xdd, 0xf2, 0x52, 0xad, 0x1b, 0xe2, 0xc8, 0x9b, 0x69, 0xc2, 0xb0, 0x68, 0xfc, 0x37, 0x8d, 0xaa, 0x95, 0x2b, 0xa7, 0xf1, 0x63, 0xc4, 0xa1, 0x16, 0x28, 0xf5, 0x5a, 0x4d, 0xf5, 0x23, 0xb3, 0xef}
)

// ApprovalEvent represents the Approval event
type ApprovalEvent struct {
	ApprovalEventIndexed
	ApprovalEventData
}

// NewApprovalEvent constructs a new Approval event
func NewApprovalEvent(
	owner common.Address,
	spender common.Address,
	value *big.Int,
) ApprovalEvent {
	return ApprovalEvent{
		ApprovalEventIndexed: ApprovalEventIndexed{
			Owner:   owner,
			Spender: spender,
		},
		ApprovalEventData: ApprovalEventData{
			Value: value,
		},
	}
}

// Approval represents an ABI event
type ApprovalEventIndexed struct {
	Owner   common.Address
	Spender common.Address
}

// EncodeTopics encodes indexed fields of Approval event to topics
func (e ApprovalEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, ApprovalEventTopic)
	{
		// Owner
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Owner, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// Spender
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Spender, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Approval event from topics, ignore hash topics
func (e *ApprovalEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for Approval event: expected 3, got %d", len(topics))
	}
	if topics[0] != ApprovalEventTopic {
		return fmt.Errorf("invalid event topic for Approval event")
	}
	var err error
	e.Owner, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.Spender, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const ApprovalEventDataStaticSize = 32

// ApprovalEventData represents an ABI tuple
type ApprovalEventData struct {
	Value *big.Int
}

// EncodedSize returns the total encoded size of ApprovalEventData
func (t ApprovalEventData) EncodedSize() int {
	dynamicSize := 0

	return ApprovalEventDataStaticSize + dynamicSize
}

// EncodeTo encodes ApprovalEventData to ABI bytes in the provided buffer
func (value ApprovalEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ApprovalEventDataStaticSize // Start dynamic data after static section
	// Field Value: uint256
	if _, err := abi.EncodeUint256(value.Value, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ApprovalEventData to ABI bytes
func (value ApprovalEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ApprovalEventData from ABI bytes in the provided buffer
func (t *ApprovalEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Value: uint256
	t.Value, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// TransferEvent represents the Transfer event
type TransferEvent struct {
	TransferEventIndexed
	TransferEventData
}

// NewTransferEvent constructs a new Transfer event
func NewTransferEvent(
	from common.Address,
	to common.Address,
	value *big.Int,
) TransferEvent {
	return TransferEvent{
		TransferEventIndexed: TransferEventIndexed{
			From: from,
			To:   to,
		},
		TransferEventData: TransferEventData{
			Value: value,
		},
	}
}

// Transfer represents an ABI event
type TransferEventIndexed struct {
	From common.Address
	To   common.Address
}

// EncodeTopics encodes indexed fields of Transfer event to topics
func (e TransferEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, TransferEventTopic)
	{
		// From
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.From, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// To
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.To, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Transfer event from topics, ignore hash topics
func (e *TransferEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for Transfer event: expected 3, got %d", len(topics))
	}
	if topics[0] != TransferEventTopic {
		return fmt.Errorf("invalid event topic for Transfer event")
	}
	var err error
	e.From, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.To, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const TransferEventDataStaticSize = 32

// TransferEventData represents an ABI tuple
type TransferEventData struct {
	Value *big.Int
}

// EncodedSize returns the total encoded size of TransferEventData
func (t TransferEventData) EncodedSize() int {
	dynamicSize := 0

	return TransferEventDataStaticSize + dynamicSize
}

// EncodeTo encodes TransferEventData to ABI bytes in the provided buffer
func (value TransferEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TransferEventDataStaticSize // Start dynamic data after static section
	// Field Value: uint256
	if _, err := abi.EncodeUint256(value.Value, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes TransferEventData to ABI bytes
func (value TransferEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TransferEventData from ABI bytes in the provided buffer
func (t *TransferEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Value: uint256
	t.Value, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}
