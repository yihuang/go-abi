// Code generated by go-abi. DO NOT EDIT.

package tests

import (
	"encoding/binary"
	"errors"
	"io"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// overloaded1(address,uint256)
	Overloaded1Selector = [4]byte{0x6d, 0xd8, 0x31, 0x3d}
	// overloaded1(address,address,uint256)
	Overloaded10Selector = [4]byte{0x16, 0xa1, 0x17, 0x8e}
	// overloaded1(address,address,uint256,bytes)
	Overloaded11Selector = [4]byte{0x4f, 0xc2, 0x5c, 0x7f}
	// overloaded2(address)
	Overloaded2Selector = [4]byte{0x07, 0x4c, 0x37, 0x24}
	// overloaded2()
	Overloaded20Selector = [4]byte{0x31, 0x09, 0x77, 0x2b}
)

// Big endian integer versions of function selectors
const (
	Overloaded1ID  = 1842884925
	Overloaded10ID = 379656078
	Overloaded11ID = 1338137727
	Overloaded2ID  = 122435364
	Overloaded20ID = 822703915
)

// _OverloadEncodeAddress encodes address to ABI bytes
func _OverloadEncodeAddress(value common.Address, buf []byte) (int, error) {
	copy(buf[12:32], value[:])
	return 32, nil
}

// _OverloadEncodeBool encodes bool to ABI bytes
func _OverloadEncodeBool(value bool, buf []byte) (int, error) {
	if value {
		buf[31] = 1
	}
	return 32, nil
}

// _OverloadEncodeBytes encodes bytes to ABI bytes
func _OverloadEncodeBytes(value []byte, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))

	// Encode data
	copy(buf[32:], value)

	return 32 + abi.Pad32(len(value)), nil
}

// _OverloadEncodeUint256 encodes uint256 to ABI bytes
func _OverloadEncodeUint256(value *big.Int, buf []byte) (int, error) {
	if err := abi.EncodeBigInt(value, buf[:32], false); err != nil {
		return 0, err
	}
	return 32, nil
}

// _OverloadSizeBytes returns the encoded size of bytes
func _OverloadSizeBytes(value []byte) int {
	size := 32 + abi.Pad32(len(value)) // length + padded bytes data
	return size
}

// _OverloadDecodeAddress decodes address from ABI bytes
func _OverloadDecodeAddress(data []byte) (common.Address, int, error) {
	var result common.Address
	copy(result[:], data[12:32])
	return result, 32, nil
}

// _OverloadDecodeBool decodes bool from ABI bytes
func _OverloadDecodeBool(data []byte) (bool, int, error) {
	result := data[31] != 0
	return result, 32, nil
}

// _OverloadDecodeBytes decodes bytes from ABI bytes
func _OverloadDecodeBytes(data []byte) ([]byte, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32+abi.Pad32(length) {
		return nil, 0, io.ErrUnexpectedEOF
	}

	// Decode data
	result := make([]byte, length)
	copy(result, data[32:32+length])
	return result, 32 + abi.Pad32(length), nil
}

// _OverloadDecodeUint256 decodes uint256 from ABI bytes
func _OverloadDecodeUint256(data []byte) (*big.Int, int, error) {
	result, err := abi.DecodeBigInt(data[:32], false)
	if err != nil {
		return nil, 0, err
	}
	return result, 32, nil
}

const Overloaded1CallStaticSize = 64

// Overloaded1Call represents an ABI tuple
type Overloaded1Call struct {
	To     common.Address
	Amount *big.Int
}

// EncodedSize returns the total encoded size of Overloaded1Call
func (t Overloaded1Call) EncodedSize() int {
	dynamicSize := 0

	return Overloaded1CallStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded1Call to ABI bytes in the provided buffer
func (value Overloaded1Call) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded1CallStaticSize // Start dynamic data after static section
	// Field To: address
	if _, err := _OverloadEncodeAddress(value.To, buf[0:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := _OverloadEncodeUint256(value.Amount, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded1Call to ABI bytes
func (value Overloaded1Call) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded1Call from ABI bytes in the provided buffer
func (t *Overloaded1Call) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field To: address
	t.To, _, err = _OverloadDecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = _OverloadDecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes overloaded1 arguments to ABI bytes including function selector
func (t Overloaded1Call) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], Overloaded1Selector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const Overloaded1ReturnStaticSize = 32

// Overloaded1Return represents an ABI tuple
type Overloaded1Return struct {
	Field1 bool
}

// EncodedSize returns the total encoded size of Overloaded1Return
func (t Overloaded1Return) EncodedSize() int {
	dynamicSize := 0

	return Overloaded1ReturnStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded1Return to ABI bytes in the provided buffer
func (value Overloaded1Return) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded1ReturnStaticSize // Start dynamic data after static section
	// Field Field1: bool
	if _, err := _OverloadEncodeBool(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded1Return to ABI bytes
func (value Overloaded1Return) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded1Return from ABI bytes in the provided buffer
func (t *Overloaded1Return) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: bool
	t.Field1, _, err = _OverloadDecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const Overloaded10CallStaticSize = 96

// Overloaded10Call represents an ABI tuple
type Overloaded10Call struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
}

// EncodedSize returns the total encoded size of Overloaded10Call
func (t Overloaded10Call) EncodedSize() int {
	dynamicSize := 0

	return Overloaded10CallStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded10Call to ABI bytes in the provided buffer
func (value Overloaded10Call) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded10CallStaticSize // Start dynamic data after static section
	// Field From: address
	if _, err := _OverloadEncodeAddress(value.From, buf[0:]); err != nil {
		return 0, err
	}

	// Field To: address
	if _, err := _OverloadEncodeAddress(value.To, buf[32:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := _OverloadEncodeUint256(value.Amount, buf[64:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded10Call to ABI bytes
func (value Overloaded10Call) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded10Call from ABI bytes in the provided buffer
func (t *Overloaded10Call) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 96
	// Decode static field From: address
	t.From, _, err = _OverloadDecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field To: address
	t.To, _, err = _OverloadDecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = _OverloadDecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes overloaded10 arguments to ABI bytes including function selector
func (t Overloaded10Call) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], Overloaded10Selector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const Overloaded10ReturnStaticSize = 32

// Overloaded10Return represents an ABI tuple
type Overloaded10Return struct {
	Field1 bool
}

// EncodedSize returns the total encoded size of Overloaded10Return
func (t Overloaded10Return) EncodedSize() int {
	dynamicSize := 0

	return Overloaded10ReturnStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded10Return to ABI bytes in the provided buffer
func (value Overloaded10Return) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded10ReturnStaticSize // Start dynamic data after static section
	// Field Field1: bool
	if _, err := _OverloadEncodeBool(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded10Return to ABI bytes
func (value Overloaded10Return) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded10Return from ABI bytes in the provided buffer
func (t *Overloaded10Return) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: bool
	t.Field1, _, err = _OverloadDecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const Overloaded11CallStaticSize = 128

// Overloaded11Call represents an ABI tuple
type Overloaded11Call struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
	Data   []byte
}

// EncodedSize returns the total encoded size of Overloaded11Call
func (t Overloaded11Call) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += _OverloadSizeBytes(t.Data)

	return Overloaded11CallStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded11Call to ABI bytes in the provided buffer
func (value Overloaded11Call) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded11CallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field From: address
	if _, err := _OverloadEncodeAddress(value.From, buf[0:]); err != nil {
		return 0, err
	}

	// Field To: address
	if _, err := _OverloadEncodeAddress(value.To, buf[32:]); err != nil {
		return 0, err
	}

	// Field Amount: uint256
	if _, err := _OverloadEncodeUint256(value.Amount, buf[64:]); err != nil {
		return 0, err
	}

	// Field Data: bytes
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = _OverloadEncodeBytes(value.Data, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes Overloaded11Call to ABI bytes
func (value Overloaded11Call) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded11Call from ABI bytes in the provided buffer
func (t *Overloaded11Call) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field From: address
	t.From, _, err = _OverloadDecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field To: address
	t.To, _, err = _OverloadDecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = _OverloadDecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Data
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Data")
		}
		t.Data, n, err = _OverloadDecodeBytes(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes overloaded11 arguments to ABI bytes including function selector
func (t Overloaded11Call) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], Overloaded11Selector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const Overloaded11ReturnStaticSize = 32

// Overloaded11Return represents an ABI tuple
type Overloaded11Return struct {
	Field1 bool
}

// EncodedSize returns the total encoded size of Overloaded11Return
func (t Overloaded11Return) EncodedSize() int {
	dynamicSize := 0

	return Overloaded11ReturnStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded11Return to ABI bytes in the provided buffer
func (value Overloaded11Return) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded11ReturnStaticSize // Start dynamic data after static section
	// Field Field1: bool
	if _, err := _OverloadEncodeBool(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded11Return to ABI bytes
func (value Overloaded11Return) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded11Return from ABI bytes in the provided buffer
func (t *Overloaded11Return) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: bool
	t.Field1, _, err = _OverloadDecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const Overloaded2CallStaticSize = 32

// Overloaded2Call represents an ABI tuple
type Overloaded2Call struct {
	Account common.Address
}

// EncodedSize returns the total encoded size of Overloaded2Call
func (t Overloaded2Call) EncodedSize() int {
	dynamicSize := 0

	return Overloaded2CallStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded2Call to ABI bytes in the provided buffer
func (value Overloaded2Call) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded2CallStaticSize // Start dynamic data after static section
	// Field Account: address
	if _, err := _OverloadEncodeAddress(value.Account, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded2Call to ABI bytes
func (value Overloaded2Call) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded2Call from ABI bytes in the provided buffer
func (t *Overloaded2Call) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Account: address
	t.Account, _, err = _OverloadDecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeWithSelector encodes overloaded2 arguments to ABI bytes including function selector
func (t Overloaded2Call) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], Overloaded2Selector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const Overloaded2ReturnStaticSize = 32

// Overloaded2Return represents an ABI tuple
type Overloaded2Return struct {
	Field1 *big.Int
}

// EncodedSize returns the total encoded size of Overloaded2Return
func (t Overloaded2Return) EncodedSize() int {
	dynamicSize := 0

	return Overloaded2ReturnStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded2Return to ABI bytes in the provided buffer
func (value Overloaded2Return) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded2ReturnStaticSize // Start dynamic data after static section
	// Field Field1: uint256
	if _, err := _OverloadEncodeUint256(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded2Return to ABI bytes
func (value Overloaded2Return) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded2Return from ABI bytes in the provided buffer
func (t *Overloaded2Return) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: uint256
	t.Field1, _, err = _OverloadDecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// Overloaded20Call represents the input arguments for overloaded20 function
type Overloaded20Call struct {
	abi.EmptyTuple
}

// EncodeWithSelector encodes overloaded20 arguments to ABI bytes including function selector
func (t Overloaded20Call) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], Overloaded20Selector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const Overloaded20ReturnStaticSize = 32

// Overloaded20Return represents an ABI tuple
type Overloaded20Return struct {
	Field1 *big.Int
}

// EncodedSize returns the total encoded size of Overloaded20Return
func (t Overloaded20Return) EncodedSize() int {
	dynamicSize := 0

	return Overloaded20ReturnStaticSize + dynamicSize
}

// EncodeTo encodes Overloaded20Return to ABI bytes in the provided buffer
func (value Overloaded20Return) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := Overloaded20ReturnStaticSize // Start dynamic data after static section
	// Field Field1: uint256
	if _, err := _OverloadEncodeUint256(value.Field1, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Overloaded20Return to ABI bytes
func (value Overloaded20Return) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Overloaded20Return from ABI bytes in the provided buffer
func (t *Overloaded20Return) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Field1: uint256
	t.Field1, _, err = _OverloadDecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}
